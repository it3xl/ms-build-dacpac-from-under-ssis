<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/24/2017 1:38:51 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DMSK0535"
  DTS:CreatorName="it3xl.com"
  DTS:DTSID="{AF4D554B-F3C1-4F11-B82E-253D665AE5F5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1049"
  DTS:ObjectName="SomePackage"
  DTS:PackageType="5"
  DTS:VersionBuild="26"
  DTS:VersionGUID="{E0C2627A-D4D6-4AA4-A877-D4BF071495F7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Update DacPac"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5C6378DB-3FF3-497C-B11B-1EDB7BA1F437}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update DacPac"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9a4ba9a692884bbe9bbba2e392b93684"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::DacPacProjectFilePath,$Project::MSBuild_Command_Prompt">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{38037D51-69DF-4D80-B266-CBB762386610}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9a4ba9a692884bbe9bbba2e392b93684</RootNamespace>
    <AssemblyName>ST_9a4ba9a692884bbe9bbba2e392b93684</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="CmdShell.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Settings.get_Default():ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Sett" +
    "ings")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


using System.IO;
using CmdShellProj;

namespace ST_9a4ba9a692884bbe9bbba2e392b93684
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            var projectFilePath = (string)Dts.Variables["$Project::DacPacProjectFilePath"].Value;
            if (!File.Exists(projectFilePath))
            {
                return;
            }
            var msBuildCommandPrompt = (string)Dts.Variables["$Project::MSBuild_Command_Prompt"].Value;
            if (!File.Exists(msBuildCommandPrompt))
            {
                return;
            }

            // Do not use the C#'s "$" formatting for SQL Server 2014 and earlier. The code will stop working silently.
            var cmdCommands = string.Format(@"
@REM Set MSBuild evnironment.
CALL ""{0}""

CALL MsBuild ""{1}""^
 /target:Build^
 /p:Configuration=Release^
 /verbosity:normal^
 /maxCpuCount",
                msBuildCommandPrompt,
                projectFilePath
                );

            new CmdShell()
                .ExecAndShowCatched(cmdCommands, System.TimeSpan.FromMinutes(15), false, true);


            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="CmdShell.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace CmdShellProj
{
    /// <summary>
    /// it3xl/cmd-multiple-commands-from-under-csharp
    /// https://github.com/it3xl/cmd-multiple-commands-from-under-csharp
    /// </summary>
    public class CmdShell
    {
        /// <summary>
        /// This method is for evolving by you and combines main techniques at once.
        /// It is an exact anamog of <see cref="ExecAndShow(string, bool, TimeSpan?)".
        /// Also consider to look at <see cref="ExecAndShowCatched(string, bool, TimeSpan?)"/>.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="executionLimit">The maximum duration limit for the entire execution. Default is 15 minutes.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        public void ExecExample(string cmdCommands, bool throwExceptions = false, TimeSpan? executionLimit = null)
        {
            var commandsList = cmdCommands
                    .Replace("\r", string.Empty)
                    .Split('\n')
                    .ToList();

            var info = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                // The false allows to access IO streams.
                UseShellExecute = false,
                // Allows write commands directly to a CMD-shell.
                RedirectStandardInput = true,
            };
            var proc = new Process { StartInfo = info };
            using (proc)
            {
                proc.Start();

                commandsList.ForEach(command => proc
                        .StandardInput.WriteLine(command));

                proc.StandardInput.WriteLine("@REM Exiting by CmdShell App. The last command sent.");
                // Allows exiting from CMD side.
                proc.StandardInput.WriteLine("EXIT");

                var span = executionLimit ?? TimeSpan.FromMinutes(15);
                var milliseconds = span.TotalMilliseconds;
                var duration = milliseconds < int.MaxValue
                    ? (int)milliseconds
                    : int.MaxValue;

                var interrupted = !proc.WaitForExit(duration);

                if (!throwExceptions)
                    return;

                if (interrupted)
                    throw new Exception("Duration limit is exceeded");

                if (proc.ExitCode != 0)
                    throw new Exception(string.Format("Error exit code {0} received.", proc.ExitCode));
            }
        }

        /// <summary>
        /// Executes CMD commands and shows outputs (stdout, stderr) on a console window.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        /// <param name="executionLimit">The maximum duration limit for the entire execution. Default is 15 minutes.</param>
        public void ExecAndShow(string cmdCommands, TimeSpan? executionLimit = null, bool throwExceptions = false)
        {
            new Demonstrating(cmdCommands, executionLimit, throwExceptions)
                .Exec();
        }

        /// <summary>
        /// Executes CMD commands and shows outputs (stdout, stderr) on a console window.
        /// </summary>
        private sealed class Demonstrating : CmdShellBase
        {
            private readonly int _executionLimitMillisec;

            public Demonstrating(string cmdCommands, TimeSpan? executionLimit, bool throwExceptions)
                : base(cmdCommands, throwExceptions)
            {
                _executionLimitMillisec = GetMilliseconds(executionLimit);
            }

            public override void Exec()
            {
                InitProcess();
                using (Proc)
                {
                    RunCommands();

                    var interrupted = !Proc.WaitForExit(_executionLimitMillisec);

                    Throw(interrupted, Proc.ExitCode);
                }
            }
        }

        /// <summary>
        /// In some cases you must catch all outputes, otherwise you shell will fail (in SSIS' Script Task as an example).
        /// This executes CMD commands, captures all outputs (stdout and stderr, not only stdin)
        ///  and passes them to your shell.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        /// <param name="outputWaitingLimit">The maximum duration limit for any output waiting from a CMD-shell. Default is 15 minutes.</param>
        /// <param name="combineOutputs">Instructs to combine all console outputs to a StringBuilder.</param>
        public void ExecAndShowCatched(string cmdCommands, TimeSpan? outputWaitingLimit = null, bool throwExceptions = false, bool combineOutputs = false)
        {
            new OutputCatcher(cmdCommands, outputWaitingLimit, throwExceptions, combineOutputs)
                .Exec();
        }

        /// <summary>
        /// Executes CMD commands and catches outputs (stdout, stderr) from the CMD-console.
        /// It is mostly for debug purposes, so you prefer to use the CMD Redirection to a log-file.
        /// </summary>
        private sealed class OutputCatcher : CmdShellBase
        {
            private readonly int _outputWaitingLimit;
            private readonly bool _combineOutputs;

            private readonly StringBuilder _outputCombined = new StringBuilder();

            public OutputCatcher(string cmdCommands, TimeSpan? outputWaitingLimit = null, bool throwExceptions = false, bool combineOutputs = false) : base(cmdCommands, throwExceptions)
            {
                _outputWaitingLimit = GetMilliseconds(outputWaitingLimit);
                _combineOutputs = combineOutputs;
            }

            public override void Exec()
            {
                ProcStartInfo.RedirectStandardOutput = true;
                ProcStartInfo.RedirectStandardError = true;

                InitProcess();
                using (Proc)
                {
                    Proc.OutputDataReceived += DataReceived;
                    Proc.BeginOutputReadLine();
                    Proc.ErrorDataReceived += DataReceived;
                    Proc.BeginErrorReadLine();

                    RunCommands();

                    var interrupted = false;
                    while (!interrupted && !Proc.HasExited)
                    {
                        interrupted = !Proc.WaitForExit(_outputWaitingLimit);
                    }

                    if (Debugger.IsAttached)
                    {
                        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(1));
                    }

                    Throw(interrupted, Proc.ExitCode);
                }
            }

            private void DataReceived(object sender, DataReceivedEventArgs e)
            {
                if (e.Data == null)
                    return;

                // Passes CMD's outputes to your process' console.
                Console.WriteLine(e.Data);

                if (!_combineOutputs)
                    return;

                lock (_outputCombined)
                {
                    if (e.Data != null)
                    {
                        _outputCombined.AppendLine(e.Data);
                    }
                }
            }

            protected override void Throw(bool interrupted, int exitCode)
            {
                if (!ThrowExceptions)
                    return;

                if (!_combineOutputs)
                {
                    base.Throw(interrupted, exitCode);

                    return;
                }

                string catchedOutput;
                lock (_outputCombined)
                {
                    catchedOutput = _outputCombined.ToString();
                }

                if (interrupted)
                {
                    throw new Exception(string.Format("Duration limit is exceeded.\nOutput:\n{0}", catchedOutput));
                }

                if (exitCode != 0)
                {
                    throw new Exception(string.Format("Error exit code {0} received.\nOutput:\n{1}", exitCode, catchedOutput));
                }
            }
        }

        private abstract class CmdShellBase
        {
            private List<string> CommandsList { get; set; }
            protected bool ThrowExceptions { get; private set; }
            protected ProcessStartInfo ProcStartInfo { get; private set; }
            protected Process Proc { get; private set; }

            protected CmdShellBase(string cmdCommands, bool throwExceptions)
            {
                CommandsList = cmdCommands
                    .Replace("\r", string.Empty)
                    .Split('\n')
                    .ToList();

                ThrowExceptions = throwExceptions;

                ProcStartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    // The false allows to access IO streams.
                    UseShellExecute = false,
                    // Allows write commands directly to a CMD-shell.
                    RedirectStandardInput = true,
                };
            }

            public abstract void Exec();

            protected virtual void Throw(bool interrupted, int exitCode)
            {
                if (!ThrowExceptions)
                    return;

                if (interrupted)
                    throw new Exception("Duration limit is exceeded");

                if (exitCode != 0)
                    throw new Exception(string.Format("Error exit code {0} received.", exitCode));
            }

            protected void InitProcess()
            {
                Proc = new Process { StartInfo = ProcStartInfo };
                try
                {
                    Proc.Start();
                }
                catch (Exception)
                {
                    Proc.Dispose();

                    throw;
                }
            }

            protected void RunCommands()
            {
                CommandsList.ForEach(command => Proc.StandardInput.WriteLine(command));
                FinishCmd(Proc.StandardInput);
            }

            protected int GetMilliseconds(TimeSpan? timeSpan)
            {
                var span = timeSpan ?? TimeSpan.FromMinutes(15);
                var milliseconds = span.TotalMilliseconds;
                var duration = milliseconds < int.MaxValue
                    ? (int)milliseconds
                    : int.MaxValue;

                return duration;
            }

            /// <summary>
            /// Allows exiting from a CMD side. Required.
            /// </summary>
            /// <param name="cmdInput"></param>
            private void FinishCmd(StreamWriter cmdInput)
            {
                cmdInput.WriteLine("@REM Exiting by CmdShell App. The last command sent.");
                // Allows exiting from CMD side.
                cmdInput.WriteLine("EXIT");
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:DisplayName>
		<msb:ProjectId>{6AC3F9F5-5F58-4A3E-B63E-A7EBC2059561}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="CmdShell.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="ab87eb01b449437b96f3a3e8dcebaf81">
			<msb:FileName>CmdShell.cs</msb:FileName>
			<msb:LineNumber>192</msb:LineNumber>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="802f4123731643e78b3f54d3db03fa6e">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>88</msb:LineNumber>
			<msb:ColumnNumber>3</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("it3xl.com")]
[assembly: AssemblyProduct("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.dll">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
AAAAAIEAAQAQACEA8CAAAAAAhhgBCAYAIgBPJwAAAACDACsAEAAiAAAAAQCIBQAAAQApCBAQAgCG
CRAQAwD/CQAAAQApCBAQAgD/CRAQAwCGCQAAAQApCBAQAgDsCRAQAwCGCRAQBADICQAAAQApCAAA
AgD/CQAAAwCGCQAAAQApCBAQAgDsCRAQAwCGCRAQBADICQAAAQB+BwAAAgCMBQAAAQByAQAAAgBW
AgAAAQCIBQAAAQCIBQAAAQCIBQAAAQCIBQAAAQApCAAAAgCGCQAAAQByAQAAAgBWAgAAAQCwBgAA
AQCACgAAAQApAgAAAQApAgkAAQgBABEAAQgGABkAAQgKACkAAQgQADEAAQgQADkAAQgQAEEAAQgQ
AEkAAQgQAFEAAQgQAFkAAQgQAGEAAQgQAGkAAQgGAIEAAQgGAKkAAQgVALkAAQgGAHEAqgkhAAkB
JQknABEBhgYtABkBcQU0ACkBwAk4ACEB1wk9AMkAMwlEAAwAAQhRAAkBOAoBAHEAAQgGAIkAAQgG
ADEBkQJXADEB7gpgAJEAAQhmALEAAQgGACEB+wqHACEBMQKKACEB5QmQAFEBVwqXANkAAQgGANkA
vAIQANkAXQWsANkAmwqsAOEAAQgGAOEAFgexAOEAUQq3ABQAAQjCABwA0AXOAOEAiQrZAGkBGwMQ
AAwAewW3AAwAJgrfAMkATQjkAOEADgroAPkAAQgQAOEASQLtACEB1wnxAHkBpwMGAOkAAQgGANkA
tQqsANkA5wesAIEBAQjCAOEAlAH9AOEA/AIGAOEAfgH9AOEA6QIGAOEAZAG3AIkBMgEEAckAQQhE
AJEBWQcIAfEAygAUAZkBGwMYAaEB4QcdAekAEAMkAaEBFQoqAYkAuQUUAakBpwMGAAIADQBeARIA
EQBUAQgAFABUAQgAGABZARIAGQBUAQIAHQBeARIAJQBUAQIAKQBeAQIALQBeARIAQQBUAQIARQBe
AQIASQBeASkAcwBZAi4ACwAxAi4AEwA6Ai4AGwBZAi4AIwBiAi4AKwCLAi4AMwCLAi4AOwCRAi4A
QwBiAi4ASwCLAi4AUwCLAi4AWwCgAkMAYwBZAUkAcwBZAmEAewBZAWMAawBZAUMBewBZAWEBewBZ
AYEBewBZAaEBewBZAcEBewBZAYACewBZAaACewBZAcACewBZAeACewBZAQADewBZASADewBZAUAD
ewBZAWADewBZAWAEewBZARsAbgD3AA4BLwE2AQMAAQAEAAMACQAEAAAAiQcMAgAAXgMRAgAAMAoW
AgAAcwobAgAAdgkjAgAAOgcnAgAAIQEsAgIABAADAAIABQAFAAEABgAFAAIABwAHAAIAFAAJAAEA
FQAJAAIAFgALAAEAFwALAAIAGAANAAEAGQANAAIAGgAPAAEAGwAPAEoAuwDIAASAAAABAAAAlxn5
mQAAAAAAAGwAAAAEAAAAAAAAAAAAAABCAdMAAAAAAA0AAAAAAAAAAAAAAEsB5QUAAAAABAAAAAAA
AAAAAAAAQgGPBgAAAAANAAAAAAAAAAAAAABLAaMAAAAAAAQAAAAAAAAAAAAAAEIBKgMAAAAAAAAA
AAEAAACkCAAABgACAAcABQAIAAUACQAFAAoABQBFAKgAAAAAPFJ1bkNvbW1hbmRzPmJfXzIwXzAA
PD5jX19EaXNwbGF5Q2xhc3MwXzAAPEV4ZWNFeGFtcGxlPmJfXzAATnVsbGFibGVgMQBJRW51bWVy
YWJsZWAxAEFjdGlvbmAxAExpc3RgMQBJbnQzMgBTVF85YTRiYTlhNjkyODg0YmJlOWJiYmEyZTM5
MmI5MzY4NAA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRT
AHZhbHVlX18AZ2V0X0RhdGEAbXNjb3JsaWIAX2V4ZWN1dGlvbkxpbWl0TWlsbGlzZWMARXhlYwBT
eXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRfUHJvYwBzZXRfUHJvYwBwcm9jAFRocmVhZABn
ZXRfSXNBdHRhY2hlZABFeGVjQW5kU2hvd0NhdGNoZWQAX291dHB1dENvbWJpbmVkAGdldF9IYXNF
eGl0ZWQAaW50ZXJydXB0ZWQAYWRkX0Vycm9yRGF0YVJlY2VpdmVkAGFkZF9PdXRwdXREYXRhUmVj
ZWl2ZWQAPFByb2M+a19fQmFja2luZ0ZpZWxkADxQcm9jU3RhcnRJbmZvPmtfX0JhY2tpbmdGaWVs
ZAA8VGhyb3dFeGNlcHRpb25zPmtfX0JhY2tpbmdGaWVsZAA8Q29tbWFuZHNMaXN0PmtfX0JhY2tp
bmdGaWVsZABGaW5pc2hDbWQAY29tbWFuZABSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRXhp
dENvZGUAZXhpdENvZGUAVmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlw
ZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBGaWxlAENvbnNvbGUARXhlY0V4YW1wbGUAc2V0X0Zp
bGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAQmVnaW5FcnJvclJlYWRMaW5l
AEJlZ2luT3V0cHV0UmVhZExpbmUAQXBwZW5kTGluZQBXcml0ZUxpbmUAVHlwZQBTeXN0ZW0uQ29y
ZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRT
Y3JpcHRPYmplY3RNb2RlbEJhc2UAQ21kU2hlbGxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNl
AERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25B
dHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRp
b25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0
dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55
QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHNldF9Vc2VTaGVsbEV4ZWN1
dGUAZ2V0X1ZhbHVlAGdldF9IYXNWYWx1ZQB2YWx1ZQBTeXN0ZW0uVGhyZWFkaW5nAFN5c3RlbS5S
dW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcARGVtb25zdHJhdGluZwBGb3JFYWNoAENtZFNoZWxs
UHJvagBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9k
ZWwAU1RfOWE0YmE5YTY5Mjg4NGJiZTliYmJhMmUzOTJiOTM2ODQuZGxsAENtZFNoZWxsAGdldF9J
dGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAFRpbWVTcGFuAHRpbWVTcGFuAFNjcmlwdE1haW4A
U3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rp
b24ARXhjZXB0aW9uAEN1bHR1cmVJbmZvAHNldF9TdGFydEluZm8AZ2V0X1Byb2NTdGFydEluZm8A
c2V0X1Byb2NTdGFydEluZm8AUHJvY2Vzc1N0YXJ0SW5mbwBTbGVlcABTeXN0ZW0uTGlucQBDaGFy
AFN0cmluZ0J1aWxkZXIAc2VuZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIARGVidWdnZXIAT3V0cHV0
Q2F0Y2hlcgBEYXRhUmVjZWl2ZWRFdmVudEhhbmRsZXIAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIA
RW50ZXIAc2V0X1JlZGlyZWN0U3RhbmRhcmRFcnJvcgAuY3RvcgAuY2N0b3IATW9uaXRvcgBTeXN0
ZW0uRGlhZ25vc3RpY3MAY21kQ29tbWFuZHMAUnVuQ29tbWFuZHMARnJvbVNlY29uZHMAZ2V0X1Rv
dGFsTWlsbGlzZWNvbmRzAEdldE1pbGxpc2Vjb25kcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNl
cnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOWE0YmE5YTY5Mjg4NGJiZTliYmJhMmUzOTJiOTM2
ODQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUXzlhNGJh
OWE2OTI4ODRiYmU5YmJiYTJlMzkyYjkzNjg0LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBGcm9t
TWludXRlcwBTZXR0aW5ncwBEYXRhUmVjZWl2ZWRFdmVudEFyZ3MAZ2V0X1Rocm93RXhjZXB0aW9u
cwBzZXRfVGhyb3dFeGNlcHRpb25zAHRocm93RXhjZXB0aW9ucwBTdWNjZXNzAEluaXRQcm9jZXNz
AGdldF9EdHMAU2NyaXB0UmVzdWx0cwBFeGlzdHMAX2NvbWJpbmVPdXRwdXRzAEZvcm1hdABPYmpl
Y3QAU3BsaXQAX291dHB1dFdhaXRpbmdMaW1pdABleGVjdXRpb25MaW1pdABXYWl0Rm9yRXhpdABn
ZXRfRGVmYXVsdABHZXRWYWx1ZU9yRGVmYXVsdABzZXRfVGFza1Jlc3VsdABDb21wb25lbnQAU3Rh
cnQAVG9MaXN0AGdldF9Db21tYW5kc0xpc3QAc2V0X0NvbW1hbmRzTGlzdABjbWRJbnB1dABnZXRf
U3RhbmRhcmRJbnB1dABzZXRfUmVkaXJlY3RTdGFuZGFyZElucHV0AHNldF9SZWRpcmVjdFN0YW5k
YXJkT3V0cHV0AFN5c3RlbS5UZXh0AEV4ZWNBbmRTaG93AFRocm93AGdldF9Bc3NlbWJseQBFbXB0
eQAAAAAAPyQAUAByAG8AagBlAGMAdAA6ADoARABhAGMAUABhAGMAUAByAG8AagBlAGMAdABGAGkA
bABlAFAAYQB0AGgAAEEkAFAAcgBvAGoAZQBjAHQAOgA6AE0AUwBCAHUAaQBsAGQAXwBDAG8AbQBt
AGEAbgBkAF8AUAByAG8AbQBwAHQAAIEnDQAKAEAAUgBFAE0AIABTAGUAdAAgAE0AUwBCAHUAaQBs
AGQAIABlAHYAbgBpAHIAbwBuAG0AZQBuAHQALgANAAoAQwBBAEwATAAgACIAewAwAH0AIgANAAoA
DQAKAEMAQQBMAEwAIABNAHMAQgB1AGkAbABkACAAIgB7ADEAfQAiAF4ADQAKACAALwB0AGEAcgBn
AGUAdAA6AEIAdQBpAGwAZABeAA0ACgAgAC8AcAA6AEMAbwBuAGYAaQBnAHUAcgBhAHQAaQBvAG4A
PQBSAGUAbABlAGEAcwBlAF4ADQAKACAALwB2AGUAcgBiAG8AcwBpAHQAeQA6AG4AbwByAG0AYQBs
AF4ADQAKACAALwBtAGEAeABDAHAAdQBDAG8AdQBuAHQAAHFTAFQAXwA5AGEANABiAGEAOQBhADYA
OQAyADgAOAA0AGIAYgBlADkAYgBiAGIAYQAyAGUAMwA5ADIAYgA5ADMANgA4ADQALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAMNAAAPYwBtAGQALgBlAHgAZQAAaUAA
UgBFAE0AIABFAHgAaQB0AGkAbgBnACAAYgB5ACAAQwBtAGQAUwBoAGUAbABsACAAQQBwAHAALgAg
AFQAaABlACAAbABhAHMAdAAgAGMAbwBtAG0AYQBuAGQAIABzAGUAbgB0AC4AAAlFAFgASQBUAAA1
RAB1AHIAYQB0AGkAbwBuACAAbABpAG0AaQB0ACAAaQBzACAAZQB4AGMAZQBlAGQAZQBkAAA7RQBy
AHIAbwByACAAZQB4AGkAdAAgAGMAbwBkAGUAIAB7ADAAfQAgAHIAZQBjAGUAaQB2AGUAZAAuAABP
RAB1AHIAYQB0AGkAbwBuACAAbABpAG0AaQB0ACAAaQBzACAAZQB4AGMAZQBlAGQAZQBkAC4ACgBP
AHUAdABwAHUAdAA6AAoAewAwAH0AAFNFAHIAcgBvAHIAIABlAHgAaQB0ACAAYwBvAGQAZQAgAHsA
MAB9ACAAcgBlAGMAZQBpAHYAZQBkAC4ACgBPAHUAdABwAHUAdAA6AAoAewAxAH0AAKmDaNEmQBFF
kHk+72AcAicABCABAQgDIAABBSABARERBCABAQ4FIAEBEVEFBwMODg4FIAASgIUFIAASgIkGIAES
gI0cAyAAHAQAAQIOBgADDg4cHAUAARFlDQYVEWEBEWUFIAEBEwAIAAESgJkRgJ0FIAASgKEHIAIB
DhKAoRgHCRIoFRJpAQ4SbRJxEWUNCAIVEWEBEWUCBg4FIAIODg4GIAEdDh0DEBABARUSaQEeABUS
gK0BHgADCgEOBCABAQIFIAEBEm0DIAACBhUSgLEBDgUgAgEcGAUVEmkBDgogAQEVEoCxARMABSAA
EoCBBCAAEwADIAANBCABAggDIAAIBQACDg4cBQcCEnECBiABARKAwQMAAAIFAAEBEWUFBwISdQID
IAAOBAABAQ4GAAIBHBACBSABEnUOBAABARwGBwMOEnUCCwcDEWUNFRFhARFlCLd6XFYZNOCJCImE
Xc2AgMyRBAAAAAAEAQAAAAEAAwYSSQMGEk0DBhIQAgYIAwYRGAIGAgMGEnUGBhUSaQEOAwYSbQMG
EnEEAAASSQQAABJNBQABARJNBAAAEhADAAABCyADAQ4CFRFhARFlCyADAQ4VEWEBEWUCDCAEAQ4V
EWEBEWUCAgYgAgEcEnkFIAIBAggHIAAVEmkBDgggAQEVEmkBDgQgABJtBCAAEnEFIAEBEnEFIAIB
DgIJIAEIFRFhARFlBiABARKAgQQIABJJBAgAEk0ECAASEAcoABUSaQEOAygAAgQoABJtBCgAEnEI
AQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzlh
NGJhOWE2OTI4ODRiYmU5YmJiYTJlMzkyYjkzNjg0AAAFAQAAAAAOAQAJaXQzeGwuY29tAABHAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQg
RnJhbWV3b3JrIDS0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFk
ZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNl
dAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAqEMAAAAAAAAAAAAAwkMAAAAgAAAAAAAAAAAAAAAAAAAA
AAAAAAAAALRDAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
CgQAAAAAAAAAAAAACgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAPmZlxkAAAEA+ZmXGT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BGoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAEYDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAGkAdAAzAHgAbAAuAGMAbwBtAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AAAAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBh
ADIAZQAzADkAMgBiADkAMwA2ADgANAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAA
MQAuADAALgA2ADUANQAxAC4AMwA5ADQAMQA3AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBh
AG0AZQAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIA
ZQAzADkAMgBiADkAMwA2ADgANAAuAGQAbABsAAAAJgABAAEATABlAGcAYQBsAEMAbwBwAHkAcgBp
AGcAaAB0AAAAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAA
eAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAYQA0AGIAYQA5
AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIAZQAzADkAMgBiADkAMwA2ADgANAAuAGQA
bABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA5AGEANABiAGEAOQBh
ADYAOQAyADgAOAA0AGIAYgBlADkAYgBiAGIAYQAyAGUAMwA5ADIAYgA5ADMANgA4ADQAAABCAA8A
AQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANQA1ADEALgAzADkANAAx
ADcAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYA
NQA1ADEALgAzADkANAAxADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAANQzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="88"
            Column="3" />
          <Breakpoint
            Enabled="True"
            File="CmdShell.cs"
            Line="192"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Update DacPac"
          TopLeft="119.5,123.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
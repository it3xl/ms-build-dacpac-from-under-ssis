<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/24/2017 1:38:51 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DMSK0535"
  DTS:CreatorName="it3xl.com"
  DTS:DTSID="{AF4D554B-F3C1-4F11-B82E-253D665AE5F5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1049"
  DTS:ObjectName="SomePackage"
  DTS:PackageType="5"
  DTS:VersionBuild="18"
  DTS:VersionGUID="{9D152916-EF9D-4BFA-9A9A-B53505A64E34}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Update DacPac"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5C6378DB-3FF3-497C-B11B-1EDB7BA1F437}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update DacPac"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9a4ba9a692884bbe9bbba2e392b93684"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::DacPacProjectFilePath,$Project::MSBuild_Command_Prompt">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{38037D51-69DF-4D80-B266-CBB762386610}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9a4ba9a692884bbe9bbba2e392b93684</RootNamespace>
    <AssemblyName>ST_9a4ba9a692884bbe9bbba2e392b93684</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="CmdShell.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Settings.get_Default():ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Sett" +
    "ings")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System.IO;
#endregion

namespace ST_9a4ba9a692884bbe9bbba2e392b93684
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            var projectFilePath = (string)Dts.Variables["$Project::DacPacProjectFilePath"].Value;
            if (!File.Exists(projectFilePath))
            {
                return;
            }
            var msBuildCommandPrompt = (string)Dts.Variables["$Project::MSBuild_Command_Prompt"].Value;
            if (!File.Exists(msBuildCommandPrompt))
            {
                return;
            }

            // Do not use the C#'s "$" formatting for SQL Server 2014 and earlier. The code will stop working silently.
            new CmdShell()
                .Execute(
                    string.Format(@"
@REM Set MSBuild evnironment.
""{0}""

MsBuild ""{1}""^
 /target:Build^
 /p:Configuration=Release^
 /verbosity:normal^
 /maxCpuCount

",
                msBuildCommandPrompt,
                projectFilePath
                ));


            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="CmdShell.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;

namespace ST_9a4ba9a692884bbe9bbba2e392b93684
{
    /// <summary>
    /// it3xl/cmd-multiple-commands-from-under-csharp
    /// https://github.com/it3xl/cmd-multiple-commands-from-under-csharp
    /// </summary>
    public class CmdShell
    {
        public void Execute(string cmdCommands)
        {
            var commandsList = cmdCommands.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

            var info = new ProcessStartInfo
            {
                FileName = "cmd.exe",

                UseShellExecute = false,
                RedirectStandardInput = true,
                RedirectStandardError = true,
                RedirectStandardOutput = true
            };

            var proc = new Process();
            using (proc)
            {
                proc.StartInfo = info;
                proc.Start();

                commandsList.ToList().ForEach(command => proc.StandardInput.WriteLine(command));

                proc.StandardInput.WriteLine("EXIT");

                var waitSeconds = 600;
                var interrupted = !proc.WaitForExit(waitSeconds * 1000);

                if (interrupted)
                {
                    // Do not use the C#'s "$" formatting for SQL Server 2014 and earlier. The code will stop working silently.
                    throw new Exception(string.Format("Was interrupted after waiting {0} seconds.", waitSeconds));
                }

                var output = proc.StandardOutput.ReadToEnd();
                var errorOutput = proc.StandardError.ReadToEnd();

                var exitCode = proc.ExitCode;
                if (exitCode != 0)
                {
                    throw new Exception(
                        // Do not use the C#'s "$" formatting for SQL Server 2014 and earlier. The code will stop working silently.
                        string.Format(@"Has the error exit code {0}.
Error Output:
{1}

Output:
{2}
",
                        exitCode,
                        errorOutput,
                        output
                        ));
                }
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:DisplayName>
		<msb:ProjectId>{6AC3F9F5-5F58-4A3E-B63E-A7EBC2059561}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="CmdShell.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="515ec54dc81c495f8740101fbd16e84a">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>89</msb:LineNumber>
			<msb:ColumnNumber>3</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("it3xl.com")]
[assembly: AssemblyProduct("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.dll">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
EAABAKAhAAAAAIYYvAUGAAIAqCEAAAAAhgDKBAYAAgApIgAAAACGGLwFBgACAKAhAAAAAIMYvAUG
AAIAMSIAAAAAkwhkBREBAgBdIgAAAACTCKMBFgECAGQiAAAAAJMIrwEbAQIAbCIAAAAAlggRByEB
AwBzIgAAAACGGLwFBgADAHsiAAAAAJEYwgUmAQMAoCEAAAAAhhi8BQYAAwCHIgAAAACDABYAEAAD
AAAAAQDcBQAAAQDTAwAAAQDZAAkAvAUBABEAvAUGABkAvAUKACkAvAUQADEAvAUQADkAvAUQAEEA
vAUQAEkAvAUQAFEAvAUQAFkAvAUQAGEAvAUQAIEAvAUGAIkAvAUGAKEAvAUGAMEAvAUVANkAfgEq
ANEA/wYuAHEAvAUGAHEARwEQAHEAtQM3AHEAVwc3AHEAogU3AHEAhAc3AHkAvAUGAHkAIQU8AHkA
OAdCAOkAPgdGAAwAvAVhABQA+gNtAHkARQd4ABEBdAEQAHkABQd+ANEA8QaDACEBvAUQAHkAcQeJ
ADEBzwCPAHkAkAWJAHkA8QCTANEA8QaXADkB/wEGAGkAvAUGAJEA1AakAEEBmgaqAEkBowSwAFEB
yQO3AFkB6ga7ANEA8QbAAEEBHQcBAJEAvAUGAGEBMAHHAGEBnwfQAKkAvAXWAMkAvAUGAAgAGADw
AAgAHAD1ACkAewBhAS4ACwA5AS4AEwBCAS4AGwBhAS4AIwBqAS4AKwCTAS4AMwCTAS4AOwCZAS4A
QwBqAS4ASwCTAS4AUwCTAS4AWwCoAUkAewBhAWEAYwD1AGMAawD1AIMAcwD1AMMAYwD1ABsAnwAE
AAEABQADAAAAaAUqAQAAwwEvAQAAFQc0AQIABgADAAIABwAFAAEACAAFAAIACQAHAFoAZwAEgAAA
AQAAAGoZm2gAAAAAAABIAAAABAAAAAAAAAAAAAAA3gCmAAAAAAAEAAAAAAAAAAAAAADeAKwEAAAA
AA0AAAAAAAAAAAAAAOcAAgQAAAAABAAAAAAAAAAAAAAA3gCPAQAAAAANAAAAAAAAAAAAAADnAH8A
AAAAAAAAAAABAAAAGQYAAAYAAgAHAAMANwBWAAAAADw+Y19fRGlzcGxheUNsYXNzMF8wADxFeGVj
dXRlPmJfXzAASUVudW1lcmFibGVgMQBBY3Rpb25gMQBMaXN0YDEASW50MzIAU1RfOWE0YmE5YTY5
Mjg4NGJiZTliYmJhMmUzOTJiOTM2ODQAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5l
cmljAHByb2MAUmVhZFRvRW5kAGNvbW1hbmQAZGVmYXVsdEluc3RhbmNlAGdldF9FeGl0Q29kZQBW
YXJpYWJsZQBFbnVtZXJhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVG
cm9tSGFuZGxlAEZpbGUAc2V0X0ZpbGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRp
bWUAV3JpdGVMaW5lAGdldF9OZXdMaW5lAFR5cGUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxC
YXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0
dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0
dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5
QXR0cmlidXRlAHNldF9Vc2VTaGVsbEV4ZWN1dGUAZ2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50
aW1lLlZlcnNpb25pbmcAU3RyaW5nAEZvckVhY2gATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRU
YXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0
TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzlhNGJhOWE2OTI4ODRiYmU5YmJiYTJlMzky
YjkzNjg0LmRsbABDbWRTaGVsbABnZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3Jp
cHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5S
ZWZsZWN0aW9uAEV4Y2VwdGlvbgBDdWx0dXJlSW5mbwBzZXRfU3RhcnRJbmZvAFByb2Nlc3NTdGFy
dEluZm8AU3lzdGVtLkxpbnEAU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIAZ2V0X1Jlc291cmNlTWFu
YWdlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBnZXRfU3RhbmRhcmRFcnJvcgBzZXRfUmVkaXJl
Y3RTdGFuZGFyZEVycm9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAY21kQ29tbWFu
ZHMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzlh
NGJhOWE2OTI4ODRiYmU5YmJiYTJlMzkyYjkzNjg0LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291
cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF85YTRiYTlhNjkyODg0YmJlOWJiYmEyZTM5MmI5MzY4NC5Q
cm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAU3RyaW5nU3BsaXRPcHRpb25zAFN1Y2Nl
c3MAUHJvY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMARXhpc3RzAEZvcm1hdABPYmplY3QAU3Bs
aXQAV2FpdEZvckV4aXQAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQARW52aXJvbm1lbnQAU3Rh
cnQAVG9MaXN0AGdldF9TdGFuZGFyZElucHV0AHNldF9SZWRpcmVjdFN0YW5kYXJkSW5wdXQAZ2V0
X1N0YW5kYXJkT3V0cHV0AHNldF9SZWRpcmVjdFN0YW5kYXJkT3V0cHV0AGdldF9Bc3NlbWJseQAA
D2MAbQBkAC4AZQB4AGUAAAlFAFgASQBUAABVVwBhAHMAIABpAG4AdABlAHIAcgB1AHAAdABlAGQA
IABhAGYAdABlAHIAIAB3AGEAaQB0AGkAbgBnACAAewAwAH0AIABzAGUAYwBvAG4AZABzAC4AAICF
SABhAHMAIAB0AGgAZQAgAGUAcgByAG8AcgAgAGUAeABpAHQAIABjAG8AZABlACAAewAwAH0ALgAN
AAoARQByAHIAbwByACAATwB1AHQAcAB1AHQAOgANAAoAewAxAH0ADQAKAA0ACgBPAHUAdABwAHUA
dAA6AA0ACgB7ADIAfQANAAoAAD8kAFAAcgBvAGoAZQBjAHQAOgA6AEQAYQBjAFAAYQBjAFAAcgBv
AGoAZQBjAHQARgBpAGwAZQBQAGEAdABoAABBJABQAHIAbwBqAGUAYwB0ADoAOgBNAFMAQgB1AGkA
bABkAF8AQwBvAG0AbQBhAG4AZABfAFAAcgBvAG0AcAB0AACBGw0ACgBAAFIARQBNACAAUwBlAHQA
IABNAFMAQgB1AGkAbABkACAAZQB2AG4AaQByAG8AbgBtAGUAbgB0AC4ADQAKACIAewAwAH0AIgAN
AAoADQAKAE0AcwBCAHUAaQBsAGQAIAAiAHsAMQB9ACIAXgANAAoAIAAvAHQAYQByAGcAZQB0ADoA
QgB1AGkAbABkAF4ADQAKACAALwBwADoAQwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgA9AFIAZQBs
AGUAYQBzAGUAXgANAAoAIAAvAHYAZQByAGIAbwBzAGkAdAB5ADoAbgBvAHIAbQBhAGwAXgANAAoA
IAAvAG0AYQB4AEMAcAB1AEMAbwB1AG4AdAANAAoADQAKAABxUwBUAF8AOQBhADQAYgBhADkAYQA2
ADkAMgA4ADgANABiAGIAZQA5AGIAYgBiAGEAMgBlADMAOQAyAGIAOQAzADYAOAA0AC4AUAByAG8A
cABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAAAwfKFSsBFRRr/uY264t5X4AAQg
AQEIAyAAAQUgAQEREQQgAQEOBSABARFdDgcIEhgdDhI5Ej0IDg4IAwAADgggAh0OHQ4RcQQgAQEC
BSABARI5AyAAAg8QAQEVEnkBHgAVEn0BHgADCgEOBhUSgIEBDgUgAgEcGAUVEnkBDgogAQEVEoCB
ARMABSAAEoCFBCABAggFAAIODhwFIAASgJUDIAAOAyAACAcABA4OHBwcBAcCDg4FIAASgKEFIAAS
gKUGIAESgKkcAyAAHAQAAQIOBgADDg4cHAgAARKAsRGAtQUgABKAuQcgAgEOEoC5CLd6XFYZNOCJ
CImEXc2AgMyRBAAAAAAEAQAAAAMGElUDBhJZAwYSFAMGEj0CBggDBhEcBAAAElUEAAASWQUAAQES
WQQAABIUAwAAAQQIABJVBAgAElkECAASFAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU1RfOWE0YmE5YTY5Mjg4NGJiZTliYmJhMmUzOTJiOTM2ODQA
AAUBAAAAAA4BAAlpdDN4bC5jb20AAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4U
RnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNLQAAADOyu++AQAAAJEAAABsU3lz
dGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwg
Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5S
ZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAD0NQAAAAAA
AAAAAAAONgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYAAAAAAAAAAAAAAABfQ29yRGxsTWFp
bgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAACgQAAAAAAAAAAAAACgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAJtoahkAAAEAm2hqGT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBGoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAEYDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAGkAdAAzAHgAbAAuAGMAbwBtAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIA
aQBwAHQAaQBvAG4AAAAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBi
AGIAYgBhADIAZQAzADkAMgBiADkAMwA2ADgANAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8A
bgAAAAAAMQAuADAALgA2ADUAMAA2AC4AMgA2ADcANwA5AAAAAABwACgAAQBJAG4AdABlAHIAbgBh
AGwATgBhAG0AZQAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIA
YgBhADIAZQAzADkAMgBiADkAMwA2ADgANAAuAGQAbABsAAAAJgABAAEATABlAGcAYQBsAEMAbwBw
AHkAcgBpAGcAaAB0AAAAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAA
AAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAYQA0
AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIAZQAzADkAMgBiADkAMwA2ADgA
NAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA5AGEANABi
AGEAOQBhADYAOQAyADgAOAA0AGIAYgBlADkAYgBiAGIAYQAyAGUAMwA5ADIAYgA5ADMANgA4ADQA
AABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYANQAwADYALgAy
ADYANwA3ADkAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADYANQAwADYALgAyADYANwA3ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAACA2AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="89"
            Column="3" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Update DacPac"
          TopLeft="119.5,123.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>
<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/24/2017 1:38:51 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DMSK0535"
  DTS:CreatorName="it3xl.com"
  DTS:DTSID="{AF4D554B-F3C1-4F11-B82E-253D665AE5F5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.106"
  DTS:LocaleID="1049"
  DTS:ObjectName="SomePackage"
  DTS:PackageType="5"
  DTS:VersionBuild="29"
  DTS:VersionGUID="{96574289-60AC-4526-BAB3-6DA74177DF6E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Update DacPac"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{5C6378DB-3FF3-497C-B11B-1EDB7BA1F437}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update DacPac"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_9a4ba9a692884bbe9bbba2e392b93684"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Project::DacPacProjectFilePath,$Project::MSBuild_Command_Prompt">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{38037D51-69DF-4D80-B266-CBB762386610}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9a4ba9a692884bbe9bbba2e392b93684</RootNamespace>
    <AssemblyName>ST_9a4ba9a692884bbe9bbba2e392b93684</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="CmdShell.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Settings.get_Default():ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Sett" +
    "ings")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


using System.IO;
using System.Text;
using CmdShellProj;

namespace ST_9a4ba9a692884bbe9bbba2e392b93684
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            var projectFilePath = Dts.Variables["$Project::DacPacProjectFilePath"].Value as string;
            if (!File.Exists(projectFilePath))
            {
                Dts.Events.FireError(18, "For $Project::DacPacProjectFilePath",
                    string.Format("No file {0}", projectFilePath),
                    "", 0);

                Dts.TaskResult = (int)ScriptResults.Failure;

                return;
            }
            var msBuildCommandPrompt = Dts.Variables["$Project::MSBuild_Command_Prompt"].Value as string;
            if (!File.Exists(msBuildCommandPrompt))
            {
                Dts.Events.FireError(18, "For $Project::MSBuild_Command_Prompt",
                    string.Format("No file {0}", msBuildCommandPrompt),
                    "", 0);

                Dts.TaskResult = (int)ScriptResults.Failure;

                return;
            }

            // Do not use the C#'s "$" formatting for SQL Server 2014 and earlier. The code will stop working silently.
            var cmdCommands = string.Format(@"
@REM Set MSBuild environment.
CALL ""{0}""

CALL MsBuild ""{1}""^
 /target:Build^
 /p:Configuration=Release^
 /verbosity:normal^
 /maxCpuCount",
                msBuildCommandPrompt,
                projectFilePath
                );

		    StringBuilder output;
		    var exitCode = new CmdShell()
		        .ExecAndShowCatched(cmdCommands, out output);

		    if (exitCode != 0)
		    {
		        Dts.Events.FireError(18, "\nFor CMD Exit Code",
		            string.Format(@"

---------------------------------------------------------------
CMD execution has a failure exit code {0}
CMD oututs is:
===============================================================

{1}
===============================================================

",
		                exitCode, output),
		            "", 0);

		        Dts.TaskResult = (int)ScriptResults.Failure;

		        return;
		    }


            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="CmdShell.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace CmdShellProj
{
    /// <summary>
    /// it3xl/cmd-multiple-commands-from-under-csharp
    /// https://github.com/it3xl/cmd-multiple-commands-from-under-csharp
    /// </summary>
    public class CmdShell
    {
        /// <summary>
        /// This method is for evolving by you and combines main techniques at once.
        /// It is an exact anamog of <see cref="ExecAndShow"/>.
        /// Also consider to look at <see cref="ExecAndShowCatched"/>.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="executionLimit">The maximum duration limit for the entire execution. Default is 15 minutes.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        public int ExecExample(string cmdCommands, TimeSpan? executionLimit = null, bool throwExceptions = false)
        {
            var commandsList = cmdCommands
                    .Replace("\r", string.Empty)
                    .Split('\n')
                    .ToList();

            var info = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                // The false allows to access IO streams.
                UseShellExecute = false,
                // Allows write commands directly to a CMD-shell.
                RedirectStandardInput = true,
            };
            var proc = new Process { StartInfo = info };
            using (proc)
            {
                proc.Start();

                commandsList.ForEach(command => proc
                        .StandardInput.WriteLine(command));

                proc.StandardInput.WriteLine("@REM Exiting by CmdShell App. The last command sent.");
                // Allows exiting from a CMD side.
                proc.StandardInput.WriteLine("EXIT");

                var span = executionLimit ?? TimeSpan.FromMinutes(15);
                var milliseconds = span.TotalMilliseconds;
                var duration = milliseconds < int.MaxValue
                    ? (int)milliseconds
                    : int.MaxValue;

                var interrupted = !proc.WaitForExit(duration);

                if (throwExceptions)
                {
                     if (interrupted)
                        throw new Exception("Duration limit is exceeded");

                    if (proc.ExitCode != 0)
                        throw new Exception(string.Format("Error exit code {0} received.", proc.ExitCode));
                }

                return proc.ExitCode;
            }
        }

        /// <summary>
        /// Executes CMD commands and shows outputs (stdout, stderr) on a console window.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        /// <param name="executionLimit">The maximum duration limit for the entire execution. Default is 15 minutes.</param>
        public int ExecAndShow(string cmdCommands, TimeSpan? executionLimit = null, bool throwExceptions = false)
        {
            var exitCode = new Demonstrating(cmdCommands, executionLimit, throwExceptions)
                .Exec();

            return exitCode;
        }

        /// <summary>
        /// Executes CMD commands and shows outputs (stdout, stderr) on a console window.
        /// </summary>
        private sealed class Demonstrating : CmdShellBase
        {
            private readonly int _executionLimitMillisec;

            internal Demonstrating(string cmdCommands, TimeSpan? executionLimit, bool throwExceptions)
                : base(cmdCommands, throwExceptions)
            {
                _executionLimitMillisec = GetMilliseconds(executionLimit);
            }

            internal override int Exec()
            {
                InitProcess();
                using (Proc)
                {
                    RunCommands();

                    var interrupted = !Proc.WaitForExit(_executionLimitMillisec);

                    Throw(interrupted, Proc.ExitCode);

                    return Proc.ExitCode;
                }
            }
        }

        /// <summary>
        /// In some cases you must catch huge outputs, otherwise you shell will fail.
        /// This method executes CMD commands, captures all outputs (stdout and stderr, not only stdin)
        ///  and passes them to your shell.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        /// <param name="collectOutputs">Instructs to collect all console outputs.</param>
        /// <param name="outputWaitLimit">The maximum duration limit for any output waiting from a CMD-shell. Default is 15 minutes.</param>
        public int ExecAndShowCatched(string cmdCommands, bool throwExceptions = false, bool collectOutputs = false, TimeSpan? outputWaitLimit = null)
        {
            var exitCode = new OutputCatcher(cmdCommands, throwExceptions, collectOutputs, outputWaitLimit)
                .Exec();

            return exitCode;
        }

        /// <summary>
        /// In some cases you must catch huge outputs, otherwise you shell will fail.
        /// This method executes CMD commands, captures all outputs (stdout and stderr, not only stdin)
        ///  and passes them to your shell.
        /// </summary>
        /// <param name="cmdCommands">CMD commands to be executed separated. Multi or a single line.</param>
        /// <param name="outputCombined">Combined CMD outputs of stdout and stderr.</param>
        /// <param name="throwExceptions">Throw an exceptions in case of a non-zero exit code or exceeding the duration limit.</param>
        /// <param name="outputWaitLimit">The maximum duration limit for any output waiting from a CMD-shell. Default is 15 minutes.</param>
        public int ExecAndShowCatched(string cmdCommands, out StringBuilder outputCombined, bool throwExceptions = false, TimeSpan? outputWaitLimit = null)
        {
            var outputer = new OutputCatcher(cmdCommands, throwExceptions, true, outputWaitLimit);
            var exitCode = outputer.Exec();

            outputCombined = outputer.OutputCombined;

            return exitCode;
        }

        /// <summary>
        /// Executes CMD commands and catches outputs (stdout, stderr) from the CMD-console.
        /// It is mostly for debug purposes, so you prefer to use the CMD Redirection to a log-file.
        /// </summary>
        private sealed class OutputCatcher : CmdShellBase
        {
            private readonly int _outputWaitingLimit;
            private readonly bool _collectOutputs;

            internal readonly StringBuilder OutputCombined = new StringBuilder();

            internal OutputCatcher(string cmdCommands,
                bool throwExceptions = false,
                bool collectOutputs = false,
                TimeSpan? outputWaitingLimit = null)
                : base(cmdCommands, throwExceptions)
            {
                _outputWaitingLimit = GetMilliseconds(outputWaitingLimit);
                _collectOutputs = collectOutputs;
            }

            internal override int Exec()
            {
                ProcStartInfo.RedirectStandardOutput = true;
                ProcStartInfo.RedirectStandardError = true;

                InitProcess();
                using (Proc)
                {
                    Proc.OutputDataReceived += DataReceived;
                    Proc.BeginOutputReadLine();
                    Proc.ErrorDataReceived += DataReceived;
                    Proc.BeginErrorReadLine();

                    RunCommands();

                    var interrupted = false;
                    while (!interrupted && !Proc.HasExited)
                    {
                        interrupted = !Proc.WaitForExit(_outputWaitingLimit);
                    }

                    if (Debugger.IsAttached)
                    {
                        System.Threading.Thread.Sleep(TimeSpan.FromSeconds(1));
                    }

                    Throw(interrupted, Proc.ExitCode);

                    return Proc.ExitCode;
                }
            }

            private void DataReceived(object sender, DataReceivedEventArgs e)
            {
                if (e.Data == null)
                    return;

                // Passes CMD's outputs to your process' console.
                // It must be here, otherwise we'll get a mess from stdout & stderr in _outputCombined at the beginning.
                Console.WriteLine(e.Data);

                if (!_collectOutputs)
                    return;

                lock (OutputCombined)
                {
                    if (e.Data != null)
                    {
                        OutputCombined.AppendLine(e.Data);
                    }
                }
            }

            protected override void Throw(bool interrupted, int exitCode)
            {
                if (!ThrowExceptions)
                    return;

                if (!_collectOutputs)
                {
                    base.Throw(interrupted, exitCode);

                    return;
                }

                string catchedOutput;
                lock (OutputCombined)
                {
                    catchedOutput = OutputCombined.ToString();
                }

                if (interrupted)
                {
                    throw new Exception(string.Format("Duration limit is exceeded.\nOutput:\n{0}", catchedOutput));
                }

                if (exitCode != 0)
                {
                    throw new Exception(string.Format("Error exit code {0} received.\nOutput:\n{1}", exitCode, catchedOutput));
                }
            }
        }

        private abstract class CmdShellBase
        {
            private List<string> CommandsList { get; set; }
            protected bool ThrowExceptions { get; private set; }
            protected ProcessStartInfo ProcStartInfo { get; private set; }
            protected Process Proc { get; private set; }

            protected CmdShellBase(string cmdCommands, bool throwExceptions)
            {
                CommandsList = cmdCommands
                    .Replace("\r", string.Empty)
                    .Split('\n')
                    .ToList();

                ThrowExceptions = throwExceptions;

                ProcStartInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    // The false allows to access IO streams.
                    UseShellExecute = false,
                    // Allows write commands directly to a CMD-shell.
                    RedirectStandardInput = true,
                };
            }

            internal abstract int Exec();

            protected virtual void Throw(bool interrupted, int exitCode)
            {
                if (!ThrowExceptions)
                    return;

                if (interrupted)
                    throw new Exception("Duration limit is exceeded");

                if (exitCode != 0)
                    // ReSharper disable once UseStringInterpolation
                    throw new Exception(string.Format("Error exit code {0} received.", exitCode));
            }

            protected void InitProcess()
            {
                Proc = new Process {  StartInfo = ProcStartInfo };
                try
                {
                    Proc.Start();
                }
                catch (Exception)
                {
                    Proc.Dispose();

                    throw;
                }
            }

            protected void RunCommands()
            {
                CommandsList.ForEach(command => Proc.StandardInput.WriteLine(command));
                FinishCmd(Proc.StandardInput);
            }

            protected int GetMilliseconds(TimeSpan? timeSpan)
            {
                var span = timeSpan ?? TimeSpan.FromMinutes(15);
                var milliseconds = span.TotalMilliseconds;
                var duration = milliseconds < int.MaxValue
                    ? (int)milliseconds
                    : int.MaxValue;

                return duration;
            }

            /// <summary>
            /// Allows exiting from a CMD side. Required.
            /// </summary>
            /// <param name="cmdInput"></param>
            private void FinishCmd(StreamWriter cmdInput)
            {
                cmdInput.WriteLine("@REM Exiting by CmdShell App. The last command sent.");
                // Allows exiting from CMD side.
                cmdInput.WriteLine("EXIT");
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:CodeName>
		<msb:DisplayName>ST_9a4ba9a692884bbe9bbba2e392b93684</msb:DisplayName>
		<msb:ProjectId>{6AC3F9F5-5F58-4A3E-B63E-A7EBC2059561}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_9a4ba9a692884bbe9bbba2e392b93684.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="CmdShell.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="802f4123731643e78b3f54d3db03fa6e">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>3</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>89</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("it3xl.com")]
[assembly: AssemblyProduct("ST_9a4ba9a692884bbe9bbba2e392b93684")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9a4ba9a692884bbe9bbba2e392b93684.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9a4ba9a692884bbe9bbba2e392b93684.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_9a4ba9a692884bbe9bbba2e392b93684.dll">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
LQjvARMAbCQAAAAAwwL0AAYBFwBoJQAAAACBAKwB/AEXANwlAAAAAMQALwsDAhkAbCYAAAAAgQil
CgkCGwB0JgAAAACBCLYKEQIbAH0mAAAAAIQIignKABwAhSYAAAAAgQieCb8AHACOJgAAAACECDIH
GgIdAJYmAAAAAIEIRAfEAB0AnyYAAAAAhAgUAR8CHgCnJgAAAACBCB0BJAIeALAmAAAAAIQYLQgq
Ah8AAAAAAAAAwwf0AAYBIQAZJwAAAADEAS8LAwIhAEwnAAAAAIQAygkGACMAnCcAAAAAhABhCAYA
IwDIJwAAAACEAI8IMAIjABQoAAAAAIEALQI6AiQALCgAAAAAgQABABAAJQCVIQAAAACGGC0IBgAm
AD8oAAAAAIMAKwAQACYAAAABAJYFAAABAFUIEBACADYKEBADALIJAAABAFUIEBACADYKEBADALIJ
AAABAFUIEBACALIJEBADAP8JEBAEAEUKAAABAFUIAgACAGMBEBADALIJEBAEAEUKAAABAFUIAAAC
ADYKAAADALIJAAABAFUIEBACALIJEBADAP8JEBAEACMKAAABAIwHAAACAJoFAAABAIABAAACAGQC
AAABAJYFAAABAJYFAAABAJYFAAABAJYFAAABAFUIAAACALIJAAABAIABAAACAGQCAAABAL4GAAAB
AMcKAAABADcCAAABADcCCQAtCAEAEQAtCAYAGQAtCAoAKQAtCBAAMQAtCBAAOQAtCBAAQQAtCBAA
SQAtCBAAUQAtCBAAWQAtCBAAYQAtCBAAaQAtCAYAmQAtCAYAwQAtCBUA0QAtCAYAcQDWCSoACQFR
CTAAEQGUBjYAGQF/BT0AKQH3CUEACQHsCUYAIQEOCkwAMQEjCFIACQF/CgEAIQEOClsAcQAtCAYA
oQAtCAYAQQGfAmkAQQE1C3IAqQAtCHgAyQAtCAYAIQFCC5oAIQE/Ap0AIQEcCqMAYQGeCqoA4QAt
CAYA4QDKAhAA4QBrBb8A4QDiCr8A6QAtCAYA6QAkB8QA6QCYCsoAFAAtCNUAHADeBeEA6QDQCuwA
eQEpAxAADACJBcoAiQBfCfIADABtCvgAiQB5CP0A6QBVCgEB+QAtCBAA6QBXAgYBgQG1AwYAeQAt
CAYA4QD8Cr8A4QAJCL8AiQEtCNUA6QCiARYB6QAKAwYA6QCMARYB6QD3AgYA6QByAcoAkQEyAR0B
iQBtCPIAmQFnByEB8QDKAC0BoQEpAzEBqQEDCDYBeQAeAz0BqQFcCkMBoQDHBS0BsQG1AwYAEgAN
AG0BAgARAHcBCAAUAG0BCAAYAHIBEgAZAG0BAgAdAHcBAgAlAHcBAgApAHcBEgAtAG0BAgA5AHcB
EgA9AG0BAgBRAHcBAgBVAHcBEgBZAG0BKQBzAI4CLgALAGYCLgATAG8CLgAbAI4CLgAjAJcCLgAr
AMACLgAzAMACLgA7AMYCLgBDAJcCLgBLAMACLgBTAMACLgBbANUCQwBjAHIBSQBzAI4CYQB7AHIB
YwBrAHIBQwF7AHIBYQF7AHIBgQF7AHIBoQF7AHIBwQF7AHIBoAJ7AHIBwAJ7AHIB4AJ7AHIBAAN7
AHIBIAN7AHIBQAN7AHIBYAN7AHIBgAN7AHIBgAR7AHIBGwCAAAoBDwEnAUgBTwEDAAEABAADAAkA
BAAAAJcHQQIAAGwDRgIAAHcKSwIAALoKUAIAAKIJWAIAAEgHXAIAACEBYQICAAQAAwACAAUABQAB
AAYABQACAAcABwACABUACQABABYACQACABcACwABABgACwACABkADQABABoADQACABsADwABABwA
DwBiAM4A2wAEgAAAAQAAAJAaMYgAAAAAAABsAAAABAAAAAAAAAAAAAAAWwHTAAAAAAANAAAAAAAA
AAAAAABkAfMFAAAAAAQAAAAAAAAAAAAAAFsBnQYAAAAADQAAAAAAAAAAAAAAZAGjAAAAAAAEAAAA
AAAAAAAAAABbATgDAAAAAAAAAAABAAAA0AgAAAYAAgAHAAUACAAFAAkABQAKAAUARwC7AAAAADxS
dW5Db21tYW5kcz5iX18yMF8wADw+Y19fRGlzcGxheUNsYXNzMF8wADxFeGVjRXhhbXBsZT5iX18w
AE51bGxhYmxlYDEASUVudW1lcmFibGVgMQBBY3Rpb25gMQBMaXN0YDEASW50MzIAU1RfOWE0YmE5
YTY5Mjg4NGJiZTliYmJhMmUzOTJiOTM2ODQAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAGdldF9EYXRhAG1zY29ybGliAF9leGVjdXRpb25M
aW1pdE1pbGxpc2VjAEV4ZWMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAZ2V0X1Byb2MAc2V0
X1Byb2MAcHJvYwBUaHJlYWQAZ2V0X0lzQXR0YWNoZWQARXhlY0FuZFNob3dDYXRjaGVkAE91dHB1
dENvbWJpbmVkAG91dHB1dENvbWJpbmVkAGdldF9IYXNFeGl0ZWQAaW50ZXJydXB0ZWQAYWRkX0Vy
cm9yRGF0YVJlY2VpdmVkAGFkZF9PdXRwdXREYXRhUmVjZWl2ZWQAPFByb2M+a19fQmFja2luZ0Zp
ZWxkADxQcm9jU3RhcnRJbmZvPmtfX0JhY2tpbmdGaWVsZAA8VGhyb3dFeGNlcHRpb25zPmtfX0Jh
Y2tpbmdGaWVsZAA8Q29tbWFuZHNMaXN0PmtfX0JhY2tpbmdGaWVsZABGaW5pc2hDbWQAY29tbWFu
ZABSZXBsYWNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRXhpdENvZGUAZXhpdENvZGUAVmFyaWFibGUA
RW51bWVyYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBGaWxlAENvbnNvbGUARXhlY0V4YW1wbGUAc2V0X0ZpbGVOYW1lAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlJ1bnRpbWUAQmVnaW5FcnJvclJlYWRMaW5lAEJlZ2luT3V0cHV0UmVhZExpbmUAQXBw
ZW5kTGluZQBXcml0ZUxpbmUAVHlwZQBTeXN0ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQ21k
U2hlbGxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29y
a0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv
ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRp
YmlsaXR5QXR0cmlidXRlAHNldF9Vc2VTaGVsbEV4ZWN1dGUAZ2V0X1ZhbHVlAGdldF9IYXNWYWx1
ZQB2YWx1ZQBTeXN0ZW0uVGhyZWFkaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJp
bmcARGVtb25zdHJhdGluZwBGb3JFYWNoAENtZFNoZWxsUHJvagBNaWNyb3NvZnQuU3FsU2VydmVy
LlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3Jp
cHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfOWE0YmE5YTY5Mjg4NGJiZTli
YmJhMmUzOTJiOTM2ODQuZGxsAENtZFNoZWxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNl
TWFuAFRpbWVTcGFuAHRpbWVTcGFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARXhjZXB0aW9uAEN1bHR1cmVJbmZv
AHNldF9TdGFydEluZm8AZ2V0X1Byb2NTdGFydEluZm8Ac2V0X1Byb2NTdGFydEluZm8AUHJvY2Vz
c1N0YXJ0SW5mbwBTbGVlcABTeXN0ZW0uTGlucQBDaGFyAFN0cmluZ0J1aWxkZXIAc2VuZGVyAGdl
dF9SZXNvdXJjZU1hbmFnZXIARGVidWdnZXIAT3V0cHV0Q2F0Y2hlcgBEYXRhUmVjZWl2ZWRFdmVu
dEhhbmRsZXIARXZlbnRzT2JqZWN0V3JhcHBlcgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBFbnRl
cgBzZXRfUmVkaXJlY3RTdGFuZGFyZEVycm9yAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IATW9uaXRv
cgBTeXN0ZW0uRGlhZ25vc3RpY3MAY21kQ29tbWFuZHMAUnVuQ29tbWFuZHMARnJvbVNlY29uZHMA
Z2V0X1RvdGFsTWlsbGlzZWNvbmRzAEdldE1pbGxpc2Vjb25kcwBTeXN0ZW0uUnVudGltZS5Db21w
aWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOWE0YmE5YTY5Mjg4NGJiZTliYmJhMmUz
OTJiOTM2ODQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNU
XzlhNGJhOWE2OTI4ODRiYmU5YmJiYTJlMzkyYjkzNjg0LlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxl
cwBGcm9tTWludXRlcwBTZXR0aW5ncwBEYXRhUmVjZWl2ZWRFdmVudEFyZ3MAZ2V0X1Rocm93RXhj
ZXB0aW9ucwBzZXRfVGhyb3dFeGNlcHRpb25zAHRocm93RXhjZXB0aW9ucwBTdWNjZXNzAEluaXRQ
cm9jZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBnZXRfRXZlbnRzAEV4aXN0cwBfY29sbGVjdE91
dHB1dHMARm9ybWF0AE9iamVjdABTcGxpdABfb3V0cHV0V2FpdGluZ0xpbWl0AGV4ZWN1dGlvbkxp
bWl0AG91dHB1dFdhaXRMaW1pdABXYWl0Rm9yRXhpdABnZXRfRGVmYXVsdABHZXRWYWx1ZU9yRGVm
YXVsdABzZXRfVGFza1Jlc3VsdABDb21wb25lbnQAU3RhcnQAVG9MaXN0AGdldF9Db21tYW5kc0xp
c3QAc2V0X0NvbW1hbmRzTGlzdABjbWRJbnB1dABnZXRfU3RhbmRhcmRJbnB1dABzZXRfUmVkaXJl
Y3RTdGFuZGFyZElucHV0AHNldF9SZWRpcmVjdFN0YW5kYXJkT3V0cHV0AFN5c3RlbS5UZXh0AEV4
ZWNBbmRTaG93AFRocm93AGdldF9Bc3NlbWJseQBFbXB0eQAAPyQAUAByAG8AagBlAGMAdAA6ADoA
RABhAGMAUABhAGMAUAByAG8AagBlAGMAdABGAGkAbABlAFAAYQB0AGgAAEdGAG8AcgAgACQAUABy
AG8AagBlAGMAdAA6ADoARABhAGMAUABhAGMAUAByAG8AagBlAGMAdABGAGkAbABlAFAAYQB0AGgA
ABdOAG8AIABmAGkAbABlACAAewAwAH0AAAEAQSQAUAByAG8AagBlAGMAdAA6ADoATQBTAEIAdQBp
AGwAZABfAEMAbwBtAG0AYQBuAGQAXwBQAHIAbwBtAHAAdAAASUYAbwByACAAJABQAHIAbwBqAGUA
YwB0ADoAOgBNAFMAQgB1AGkAbABkAF8AQwBvAG0AbQBhAG4AZABfAFAAcgBvAG0AcAB0AACBJw0A
CgBAAFIARQBNACAAUwBlAHQAIABNAFMAQgB1AGkAbABkACAAZQBuAHYAaQByAG8AbgBtAGUAbgB0
AC4ADQAKAEMAQQBMAEwAIAAiAHsAMAB9ACIADQAKAA0ACgBDAEEATABMACAATQBzAEIAdQBpAGwA
ZAAgACIAewAxAH0AIgBeAA0ACgAgAC8AdABhAHIAZwBlAHQAOgBCAHUAaQBsAGQAXgANAAoAIAAv
AHAAOgBDAG8AbgBmAGkAZwB1AHIAYQB0AGkAbwBuAD0AUgBlAGwAZQBhAHMAZQBeAA0ACgAgAC8A
dgBlAHIAYgBvAHMAaQB0AHkAOgBuAG8AcgBtAGEAbABeAA0ACgAgAC8AbQBhAHgAQwBwAHUAQwBv
AHUAbgB0AAAlCgBGAG8AcgAgAEMATQBEACAARQB4AGkAdAAgAEMAbwBkAGUAAIIXDQAKAA0ACgAt
AC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A
LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAt
AC0ALQAtAC0ALQANAAoAQwBNAEQAIABlAHgAZQBjAHUAdABpAG8AbgAgAGgAYQBzACAAYQAgAGYA
YQBpAGwAdQByAGUAIABlAHgAaQB0ACAAYwBvAGQAZQAgAHsAMAB9AA0ACgBDAE0ARAAgAG8AdQB0
AHUAdABzACAAaQBzADoADQAKAD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0A
PQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9
AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AA0ACgANAAoAewAxAH0ADQAKAD0APQA9AD0A
PQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9
AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0APQA9AD0A
PQA9AA0ACgANAAoAAXFTAFQAXwA5AGEANABiAGEAOQBhADYAOQAyADgAOAA0AGIAYgBlADkAYgBi
AGIAYQAyAGUAMwA5ADIAYgA5ADMANgA4ADQALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAAAMNAAAPYwBtAGQALgBlAHgAZQAAaUAAUgBFAE0AIABFAHgAaQB0AGkAbgBn
ACAAYgB5ACAAQwBtAGQAUwBoAGUAbABsACAAQQBwAHAALgAgAFQAaABlACAAbABhAHMAdAAgAGMA
bwBtAG0AYQBuAGQAIABzAGUAbgB0AC4AAAlFAFgASQBUAAA1RAB1AHIAYQB0AGkAbwBuACAAbABp
AG0AaQB0ACAAaQBzACAAZQB4AGMAZQBlAGQAZQBkAAA7RQByAHIAbwByACAAZQB4AGkAdAAgAGMA
bwBkAGUAIAB7ADAAfQAgAHIAZQBjAGUAaQB2AGUAZAAuAABPRAB1AHIAYQB0AGkAbwBuACAAbABp
AG0AaQB0ACAAaQBzACAAZQB4AGMAZQBlAGQAZQBkAC4ACgBPAHUAdABwAHUAdAA6AAoAewAwAH0A
AFNFAHIAcgBvAHIAIABlAHgAaQB0ACAAYwBvAGQAZQAgAHsAMAB9ACAAcgBlAGMAZQBpAHYAZQBk
AC4ACgBPAHUAdABwAHUAdAA6AAoAewAxAH0AAAC/i/tC1RZASrG+38/tPN8MAAQgAQEIAyAAAQUg
AQEREQQgAQEOBSABARFdDgcGDg4OEj0IFRFBARFFBSAAEoCFBSAAEoCJBiABEoCNHAMgABwEAAEC
DgUgABKAmQUAAg4OHAggBQIIDg4OCAYAAw4OHBwGFRFBARFFCAABEoChEYClBSAAEoCpByACAQ4S
gKkZBwoSKBUSbQEOEnESdRFFDQgCFRFBARFFCAIGDgUgAg4ODgYgAR0OHQMQEAEBFRJtAR4AFRKA
tQEeAAMKAQ4EIAEBAgUgAQEScQMgAAIGFRKAuQEOBSACARwYBRUSbQEOCiABARUSgLkBEwAFIAAS
gIEFAAERRQ0EIAATAAMgAA0EIAECCAMgAAgEBwESIAYHAxJ1AggGIAEBEoDFAwAAAgUAAQERRQUH
AhI9AgMgAA4EAAEBDgYAAgEcEAIFIAESPQ4EAAEBHAYHAw4SPQILBwMRRQ0VEUEBEUUIt3pcVhk0
4IkIiYRdzYCAzJEEAAAAAAQBAAAAAQADBhJVAwYSWQMGEhACBggDBhEYAgYCAwYSPQYGFRJtAQ4D
BhJxAwYSdQQAABJVBAAAElkFAAEBElkEAAASEAMAAAELIAMIDhURQQERRQIMIAQIDgICFRFBARFF
DiAECA4QEj0CFRFBARFFCyADAQ4VEUEBEUUCDCAEAQ4CAhURQQERRQYgAgEcEnkFIAIBAggHIAAV
Em0BDgggAQEVEm0BDgQgABJxBCAAEnUFIAEBEnUFIAIBDgIJIAEIFRFBARFFBiABARKAgQQIABJV
BAgAElkECAASEAcoABUSbQEOAygAAgQoABJxBCgAEnUIAQAIAAAAAAAeAQABAFQCFldyYXBOb25F
eGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzlhNGJhOWE2OTI4ODRiYmU5YmJiYTJlMzky
YjkzNjg0AAAFAQAAAAAOAQAJaXQzeGwuY29tAABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQAAAC0AAAAzsrvvgEA
AACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9u
PTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4
OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0
AAAAQEgAAAAAAAAAAAAAWkgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAExIAAAAAAAAAAAAAAAA
X0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAACgQA
AAAAAAAAAAAACgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABADGIkBoAAAEAMYiQGj8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBGoD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAEYDAAABADAAMAAwADAAMAA0AGIAMAAA
ABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUA
AAAAAGkAdAAzAHgAbAAuAGMAbwBtAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBv
AG4AAAAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIA
ZQAzADkAMgBiADkAMwA2ADgANAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAu
ADAALgA2ADgAMAAwAC4AMwA0ADgANgA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0A
ZQAAAFMAVABfADkAYQA0AGIAYQA5AGEANgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIAZQAz
ADkAMgBiADkAMwA2ADgANAAuAGQAbABsAAAAJgABAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAYQA0AGIAYQA5AGEA
NgA5ADIAOAA4ADQAYgBiAGUAOQBiAGIAYgBhADIAZQAzADkAMgBiADkAMwA2ADgANAAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA5AGEANABiAGEAOQBhADYA
OQAyADgAOAA0AGIAYgBlADkAYgBiAGIAYQAyAGUAMwA5ADIAYgA5ADMANgA4ADQAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAOAAwADAALgAzADQAOAA2ADUA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAOAAw
ADAALgAzADQAOAA2ADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAGw4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="89"
            Column="3" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="152,42"
          Id="Package\Update DacPac"
          TopLeft="119.5,123.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>